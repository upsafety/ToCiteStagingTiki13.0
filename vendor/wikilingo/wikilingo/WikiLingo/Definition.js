/* parser generated by jison 0.4.6 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Definition = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"wiki":3,"contents":4,"EOF":5,"content":6,"CONTENT":7,"COMMENT":8,"NO_PARSE":9,"PREFORMATTED_TEXT":10,"VARIABLE":11,"HTML_TAG":12,"HORIZONTAL_BAR":13,"BOLD_START":14,"BOLD_END":15,"CENTER_START":16,"CENTER_END":17,"CODE":18,"COLOR_START":19,"COLOR_END":20,"ITALIC_START":21,"ITALIC_END":22,"LINK_START":23,"LINK_END":24,"STRIKE_START":25,"STRIKE_END":26,"DOUBLE_DASH":27,"TABLE_START":28,"TABLE_END":29,"TITLE_BAR_START":30,"TITLE_BAR_END":31,"UNDERSCORE_START":32,"UNDERSCORE_END":33,"PAST_LINK_START":34,"PAST_LINK_END":35,"WIKI_LINK_START":36,"WIKI_LINK_END":37,"WIKI_LINK_TYPE_START":38,"WIKI_LINK_TYPE_END":39,"WIKI_UNLINK_START":40,"WIKI_UNLINK_END":41,"WORD_LINK":42,"INLINE_PLUGIN_START":43,"INLINE_PLUGIN_PARAMETERS":44,"PLUGIN_START":45,"PLUGIN_PARAMETERS":46,"PLUGIN_END":47,"LINE_END":48,"FORCED_LINE_END":49,"CHAR":50,"SPECIAL_CHAR":51,"WHITE_SPACE":52,"PRE_BLOCK_START":53,"BLOCK_START":54,"BLOCK_END":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"CONTENT",8:"COMMENT",9:"NO_PARSE",10:"PREFORMATTED_TEXT",11:"VARIABLE",12:"HTML_TAG",13:"HORIZONTAL_BAR",14:"BOLD_START",15:"BOLD_END",16:"CENTER_START",17:"CENTER_END",18:"CODE",19:"COLOR_START",20:"COLOR_END",21:"ITALIC_START",22:"ITALIC_END",23:"LINK_START",24:"LINK_END",25:"STRIKE_START",26:"STRIKE_END",27:"DOUBLE_DASH",28:"TABLE_START",29:"TABLE_END",30:"TITLE_BAR_START",31:"TITLE_BAR_END",32:"UNDERSCORE_START",33:"UNDERSCORE_END",34:"PAST_LINK_START",35:"PAST_LINK_END",36:"WIKI_LINK_START",37:"WIKI_LINK_END",38:"WIKI_LINK_TYPE_START",39:"WIKI_LINK_TYPE_END",40:"WIKI_UNLINK_START",41:"WIKI_UNLINK_END",42:"WORD_LINK",43:"INLINE_PLUGIN_START",44:"INLINE_PLUGIN_PARAMETERS",45:"PLUGIN_START",46:"PLUGIN_PARAMETERS",47:"PLUGIN_END",48:"LINE_END",49:"FORCED_LINE_END",50:"CHAR",51:"SPECIAL_CHAR",52:"WHITE_SPACE",53:"PRE_BLOCK_START",54:"BLOCK_START",55:"BLOCK_END"},
productions_: [0,[3,1],[3,2],[3,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,1],[6,2],[6,2],[6,3],[6,4],[6,3],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,4],[6,3],[6,2],[6,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 	    return $$[$0];
 	
break;
case 2:
        return $$[$0-1];
	
break;
case 3:
        return $$[$0];
    
break;
case 5:
	    //js
            this.$.addContent($$[$0]);

		/*php
			$$[$0-1]->addContent($$[$0]);
        */
	
break;
case 6:
	    //js
            this.$ = yy.setType('Content', $$[$0]);

	    /*php
	        $$[$0]->setType('Content', $this);
	    */
	
break;
case 7:
	    //js
            this.$ = yy.setType('Comment', $$[$0]);

        /*php
			$$[$0]->setType('Comment', $this);
        */
    
break;
case 8:
        //js
            this.$ = yy.setType('NoParse', $$[$0]);

        /*php
            $$[$0]->setType('NoParse', $this);
        */
    
break;
case 9:
        //js
            this.$ = yy.setType('PreFormattedText', $$[$0]);

        /*php
            $$[$0]->setType('PreFormattedText', $this);
        */
    
break;
case 10:
        //js
            this.$ = yy.setType('Variable', $$[$0]);

        /*php
            $$[$0]->setType('Variable', $this);
        */
    
break;
case 11:
        //js
            this.$ = yy.setType('Tag', $$[$0]);

        /*php
            $$[$0]->setType('Tag', $this);
        */
    
break;
case 12:
        //js
            this.$ = yy.setType('HorizontalBar', $$[$0]);

		/*php
		    $$[$0]->setType('HorizontalBar', $this);
        */
	
break;
case 13:
        //js
            this.$ = yy.setType('Content', $$[$0]);

        /*php
            $$[$0]->setType('Content');
        */
    
break;
case 14:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 16:
        //js
            this.$ = yy.setType('Bold', $$[$0-2])
                .addChild($$[$0-1]);

		/*php
		    $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('Bold', $this);
        */
	
break;
case 18:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 20:
        //js
            this.$ = yy.setType('Center', $$[$0-2])
                .addChild($$[$0-1]);

		/*php
		    $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('Center', $this);
        */
	
break;
case 21:
        //js
            this.$ = yy.setType('Code', $$[$0]);

		/*php
		    $$[$0]->setType('Code', $this);
        */
	
break;
case 23:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 25:
	    //js
            this.$ = yy.setType('Color', $$[$0-2])
                .addChild($$[$0-1]);

		/*php
		    $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('Color', $this);
        */
	
break;
case 27:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 29:
	    //js
            this.$ = yy.setType('Italic', $$[$0-2])
                .addChild($$[$0-1]);

		/*php
		    $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('Italic', $this);
        */
	
break;
case 30:
        //js
            this.$ = yy.setType('Content', $$[$0]);

        /*php
            $$[$0]->setType('Content', $this);
        */
    
break;
case 31:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 33:
	    //js
            this.$ = yy.setType('Link', $$[$0-2])
                .addChild($$[$0-1]);

		/*php
		    //type already set

		    $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('Link', $this);
        */
	
break;
case 35:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 37:
	    //js
	        this.$ = yy.setType('Strike', $$[$0-2])
	            .addChild($$[$0-1]);

		/*php
		    $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('Strike', $this);
        */
	
break;
case 38:
        //js
            this.$ = yy.setType('DoubleDash', $$[$0]);

        /*php
            $$[$0]->setType('DoubleDash', $this);
        */
    
break;
case 40:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 42:
	    //js
	        this.$ = yy.setType('Table', $$[$0-2])
	            .addChild($$[$0-1]);

		/*php
		    $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('Table', $this);
        */
	
break;
case 44:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 46:
	    //js
	        this.$ = yy.setType('TitleBar', $$[$0-2])
	            .addChild($$[$0-1]);

		/*php
			$type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('TitleBar', $this);
        */
	
break;
case 48:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 50:
	    //js
	        this.$ = yy.setType('Underscore', $$[$0-2])
	            .addChild($$[$0-1]);

		/*php
		    $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('Underscore', $this);
        */
	
break;
case 52:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 54:
	    //js
	        this.$ = yy.setType('PastLink', $$[$0-2])
	            .addChild($$[$0-1]);

        /*php
            //Type already set
            $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('PastLink', $this);
        */
    
break;
case 56:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 58:
	    //js
	        this.$ = yy.setType('WikiLink', $$[$0-2])
	            .addChild($$[$0-1]);

		/*php
			//Type already set
			$type = $$[$0-2];
			$$[$0-1]->setParent($type);
			$type->setType('WikiLink', $this);
        */
	
break;
case 60:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 62:
	    //js
	        this.$ = yy.setType('WikiLinkType', $$[$0-2])
	            .addChild($$[$0-1]);

        /*php
            //Type already set
            $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('WikiLinkType', $this);
        */
    
break;
case 64:
        //js
            this.$ = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);

        /*php
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
        */
    
break;
case 66:
	    //js
	        this.$ = yy.setType('WikiUnlink', $$[$0-2])
	            .addChild($$[$0-1]);

        /*php
            //Type already set
            $type = $$[$0-2];
            $$[$0-1]->setParent($type);
            $type->setType('WikiUnlink', $this);
        */
    
break;
case 67:
	    //js
	        this.$ = yy.setType('WordLink', $$[$0])
                .addArgument($$[$0]);

        /*php
            $type = $$[$0];
            $type->addArgument($$[$0]);
            $type->setType('WordLink', $this);

        */
    
break;
case 68:
        //js
            this.$ = yy.setType('InlinePlugin', $$[$0])
                .setOption('NoBody', true)
                .setOption('Inline', true)
                .addContent($$[$01]);

        /*php
            $type = $$[$0];
            $type->setOption('NoBody', true);
            $type->setOption('Inline', true);
            $type->addContent($$[$01]);
            $type->setType('InlinePlugin', $this);
        */
    
break;
case 69:
        //js
            this.$ = yy.setType('InlinePlugin', $$[$0-1])
                .setOption('NoBody', true)
                .setOption('Inline', true)
                .addContent($$[$0]);

        /*php
            $type = $$[$0-1];
            $type->setOption('NoBody', true);
            $type->setOption('Inline', true);
            $type->addContent($$[$0]);
            $type->setType('InlinePlugin', $this);
        */
    
break;
case 70:
	    //js
	        this.$ = yy.setType('InlinePlugin', $$[$0-1])
                .setOption('NoBody', true)
                .setOption('Inline', true)
                .addArgument($$[$0]);

 		/*php
 		    $type = $$[$0-1];
            $type->setOption('NoBody', true);
            $type->setOption('Inline', true);
            $type->addArgument($$[$0]);
            $type->setType('InlinePlugin', $this);
        */
 	
break;
case 71:
 	    //js
            this.$ = yy.setType('Content', $$[$0-2]);
            var arg2 = yy.setType('Content', $$[$0-1])
                .addContent($$[$0]);
            this.$.addContent($$[$0-1]);

        /*php
            $$[$0-2]->setType('Content', $this);
            $$[$0-1]->setType('Content', $this);
            $$[$0-1]->addContent($$[$0]);
            $$[$0-2]->addContent($$[$0-1]);
        */

 	
break;
case 72:
	    //js
	        this.$ = yy.setType('Plugin', $$[$0-3], $$[$0])
                .addArgument($$[$0-2])
	            .addChild($$[$0-1]);

 	    /*php
 		    $type = $$[$0-3];
 		    $type->addArgument($$[$0-2]);
 		    $$[$0-1]->setParent($type);
 		    $type->stateEnd = $$[$0];
 		    $type->setType('Plugin', $this);
        */
 	
break;
case 73:
	    //js
	        this.$ = yy.setType('Plugin', $$[$0-2], $$[$0])
	            .addArgument($$[$0-1])
	            .addArgument($$[$0]);

  	    /*php
            $type = $$[$0-2];
            $type->addArgument($$[$0-1]);
            $type->addArgument($$[$0]);
            $type->stateEnd = $$[$0];
            $type->setType('Plugin', $this);
        */
     
break;
case 76:
        //js
            this.$ = yy.setType('Line', $$[$0]);

        /*php
            $$[$0]->setType('Line', $this);
        */
    
break;
case 77:
        //js
            this.$ = yy.setType('ForcedLine', $$[$0]);

        /*php
            $$[$0]->setType('ForcedLine', $this);
        */
    
break;
case 78:
        //js
            this.$ = yy.setType('Char', $$[$0]);

        /*php
            $$[$0]->setType('Char', $this);
        */
    
break;
case 79:
        //js
            this.$ = yy.setType('SpecialChar', $$[$0]);

        /*php
            $$[$0]->setType('SpecialChar', $this);
        */
    
break;
case 80:
        //js
            this.$ = yy.setType('WhiteSpace', $$[$0]);

        /*php
            $$[$0]->setType('WhiteSpace', $this);
        */
    
break;
case 81:
        //js
            this.$ = yy.setType('Block', $$[$0-2])
                .setOption('Empty', 'true');

        /*php
	        $$[$0-2]->setOption('Empty', 'true');
	        $$[$0-2]->setType('Block', $this);
	    */
	
break;
case 82:
	    //js
	        this.$ = yy.setType('Block', $$[$0-3])
                .addArgument($$[$0-2])
                .addArgument($$[$0-1])
                .addChild($$[$0-1]);

        /*php
			$type = $$[$0-3];
			$type->addArgument($$[$0-2]);
			$type->addArgument($$[$0-1]);
			$$[$0-1]->setParent($type);
			$type->setType('Block', $this);
		*/
    
break;
case 83:
        //js
            this.$ = yy.setType('Block', $$[$0-2])
                .addArgument($$[$0-1])
                .addArgument($$[$0])
                .addChild($$[$0]);

        /*php
            $type = $$[$0-2];
            $type->addArgument($$[$0-1]);
            $type->addArgument($$[$0]);
            $$[$0]->setParent($type);
            $type->setType('Block', $this);
        */
    
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],16:[1,13],18:[1,14],19:[1,15],21:[1,16],23:[1,17],25:[1,18],27:[1,19],28:[1,20],30:[1,21],32:[1,22],34:[1,23],36:[1,24],38:[1,25],40:[1,26],42:[1,27],43:[1,28],45:[1,29],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35]},{1:[3]},{1:[2,1],5:[1,36],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],16:[1,13],18:[1,14],19:[1,15],21:[1,16],23:[1,17],25:[1,18],27:[1,19],28:[1,20],30:[1,21],32:[1,22],34:[1,23],36:[1,24],38:[1,25],40:[1,26],42:[1,27],43:[1,28],45:[1,29],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35]},{1:[2,3]},{1:[2,4],5:[2,4],7:[2,4],8:[2,4],9:[2,4],10:[2,4],11:[2,4],12:[2,4],13:[2,4],14:[2,4],15:[2,4],16:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],38:[2,4],39:[2,4],40:[2,4],41:[2,4],42:[2,4],43:[2,4],45:[2,4],47:[2,4],48:[2,4],49:[2,4],50:[2,4],51:[2,4],52:[2,4],53:[2,4],55:[2,4]},{1:[2,6],5:[2,6],7:[2,6],8:[2,6],9:[2,6],10:[2,6],11:[2,6],12:[2,6],13:[2,6],14:[2,6],15:[2,6],16:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],38:[2,6],39:[2,6],40:[2,6],41:[2,6],42:[2,6],43:[2,6],45:[2,6],47:[2,6],48:[2,6],49:[2,6],50:[2,6],51:[2,6],52:[2,6],53:[2,6],55:[2,6]},{1:[2,7],5:[2,7],7:[2,7],8:[2,7],9:[2,7],10:[2,7],11:[2,7],12:[2,7],13:[2,7],14:[2,7],15:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],21:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],39:[2,7],40:[2,7],41:[2,7],42:[2,7],43:[2,7],45:[2,7],47:[2,7],48:[2,7],49:[2,7],50:[2,7],51:[2,7],52:[2,7],53:[2,7],55:[2,7]},{1:[2,8],5:[2,8],7:[2,8],8:[2,8],9:[2,8],10:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],17:[2,8],18:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],38:[2,8],39:[2,8],40:[2,8],41:[2,8],42:[2,8],43:[2,8],45:[2,8],47:[2,8],48:[2,8],49:[2,8],50:[2,8],51:[2,8],52:[2,8],53:[2,8],55:[2,8]},{1:[2,9],5:[2,9],7:[2,9],8:[2,9],9:[2,9],10:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],39:[2,9],40:[2,9],41:[2,9],42:[2,9],43:[2,9],45:[2,9],47:[2,9],48:[2,9],49:[2,9],50:[2,9],51:[2,9],52:[2,9],53:[2,9],55:[2,9]},{1:[2,10],5:[2,10],7:[2,10],8:[2,10],9:[2,10],10:[2,10],11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],45:[2,10],47:[2,10],48:[2,10],49:[2,10],50:[2,10],51:[2,10],52:[2,10],53:[2,10],55:[2,10]},{1:[2,11],5:[2,11],7:[2,11],8:[2,11],9:[2,11],10:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],16:[2,11],17:[2,11],18:[2,11],19:[2,11],20:[2,11],21:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],45:[2,11],47:[2,11],48:[2,11],49:[2,11],50:[2,11],51:[2,11],52:[2,11],53:[2,11],55:[2,11]},{1:[2,12],5:[2,12],7:[2,12],8:[2,12],9:[2,12],10:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],16:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],21:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],39:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],45:[2,12],47:[2,12],48:[2,12],49:[2,12],50:[2,12],51:[2,12],52:[2,12],53:[2,12],55:[2,12]},{1:[2,13],4:38,5:[2,13],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[1,39],16:[1,13],17:[2,13],18:[1,14],19:[1,15],20:[2,13],21:[1,16],22:[2,13],23:[1,17],24:[2,13],25:[1,18],26:[2,13],27:[1,19],28:[1,20],29:[2,13],30:[1,21],31:[2,13],32:[1,22],33:[2,13],34:[1,23],35:[2,13],36:[1,24],37:[2,13],38:[1,25],39:[2,13],40:[1,26],41:[2,13],42:[1,27],43:[1,28],45:[1,29],47:[2,13],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,13]},{1:[2,17],4:40,5:[2,17],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,17],16:[1,13],17:[1,41],18:[1,14],19:[1,15],20:[2,17],21:[1,16],22:[2,17],23:[1,17],24:[2,17],25:[1,18],26:[2,17],27:[1,19],28:[1,20],29:[2,17],30:[1,21],31:[2,17],32:[1,22],33:[2,17],34:[1,23],35:[2,17],36:[1,24],37:[2,17],38:[1,25],39:[2,17],40:[1,26],41:[2,17],42:[1,27],43:[1,28],45:[1,29],47:[2,17],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,17]},{1:[2,21],5:[2,21],7:[2,21],8:[2,21],9:[2,21],10:[2,21],11:[2,21],12:[2,21],13:[2,21],14:[2,21],15:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],39:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],45:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],51:[2,21],52:[2,21],53:[2,21],55:[2,21]},{1:[2,22],4:42,5:[2,22],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,22],16:[1,13],17:[2,22],18:[1,14],19:[1,15],20:[1,43],21:[1,16],22:[2,22],23:[1,17],24:[2,22],25:[1,18],26:[2,22],27:[1,19],28:[1,20],29:[2,22],30:[1,21],31:[2,22],32:[1,22],33:[2,22],34:[1,23],35:[2,22],36:[1,24],37:[2,22],38:[1,25],39:[2,22],40:[1,26],41:[2,22],42:[1,27],43:[1,28],45:[1,29],47:[2,22],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,22]},{1:[2,26],4:44,5:[2,26],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,26],16:[1,13],17:[2,26],18:[1,14],19:[1,15],20:[2,26],21:[1,16],22:[1,45],23:[1,17],24:[2,26],25:[1,18],26:[2,26],27:[1,19],28:[1,20],29:[2,26],30:[1,21],31:[2,26],32:[1,22],33:[2,26],34:[1,23],35:[2,26],36:[1,24],37:[2,26],38:[1,25],39:[2,26],40:[1,26],41:[2,26],42:[1,27],43:[1,28],45:[1,29],47:[2,26],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,26]},{1:[2,30],4:46,5:[2,30],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,30],16:[1,13],17:[2,30],18:[1,14],19:[1,15],20:[2,30],21:[1,16],22:[2,30],23:[1,17],24:[1,47],25:[1,18],26:[2,30],27:[1,19],28:[1,20],29:[2,30],30:[1,21],31:[2,30],32:[1,22],33:[2,30],34:[1,23],35:[2,30],36:[1,24],37:[2,30],38:[1,25],39:[2,30],40:[1,26],41:[2,30],42:[1,27],43:[1,28],45:[1,29],47:[2,30],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,30]},{1:[2,34],4:48,5:[2,34],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,34],16:[1,13],17:[2,34],18:[1,14],19:[1,15],20:[2,34],21:[1,16],22:[2,34],23:[1,17],24:[2,34],25:[1,18],26:[1,49],27:[1,19],28:[1,20],29:[2,34],30:[1,21],31:[2,34],32:[1,22],33:[2,34],34:[1,23],35:[2,34],36:[1,24],37:[2,34],38:[1,25],39:[2,34],40:[1,26],41:[2,34],42:[1,27],43:[1,28],45:[1,29],47:[2,34],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,34]},{1:[2,38],5:[2,38],7:[2,38],8:[2,38],9:[2,38],10:[2,38],11:[2,38],12:[2,38],13:[2,38],14:[2,38],15:[2,38],16:[2,38],17:[2,38],18:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[2,38],28:[2,38],29:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38],45:[2,38],47:[2,38],48:[2,38],49:[2,38],50:[2,38],51:[2,38],52:[2,38],53:[2,38],55:[2,38]},{1:[2,39],4:50,5:[2,39],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,39],16:[1,13],17:[2,39],18:[1,14],19:[1,15],20:[2,39],21:[1,16],22:[2,39],23:[1,17],24:[2,39],25:[1,18],26:[2,39],27:[1,19],28:[1,20],29:[1,51],30:[1,21],31:[2,39],32:[1,22],33:[2,39],34:[1,23],35:[2,39],36:[1,24],37:[2,39],38:[1,25],39:[2,39],40:[1,26],41:[2,39],42:[1,27],43:[1,28],45:[1,29],47:[2,39],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,39]},{1:[2,43],4:52,5:[2,43],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,43],16:[1,13],17:[2,43],18:[1,14],19:[1,15],20:[2,43],21:[1,16],22:[2,43],23:[1,17],24:[2,43],25:[1,18],26:[2,43],27:[1,19],28:[1,20],29:[2,43],30:[1,21],31:[1,53],32:[1,22],33:[2,43],34:[1,23],35:[2,43],36:[1,24],37:[2,43],38:[1,25],39:[2,43],40:[1,26],41:[2,43],42:[1,27],43:[1,28],45:[1,29],47:[2,43],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,43]},{1:[2,47],4:54,5:[2,47],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,47],16:[1,13],17:[2,47],18:[1,14],19:[1,15],20:[2,47],21:[1,16],22:[2,47],23:[1,17],24:[2,47],25:[1,18],26:[2,47],27:[1,19],28:[1,20],29:[2,47],30:[1,21],31:[2,47],32:[1,22],33:[1,55],34:[1,23],35:[2,47],36:[1,24],37:[2,47],38:[1,25],39:[2,47],40:[1,26],41:[2,47],42:[1,27],43:[1,28],45:[1,29],47:[2,47],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,47]},{1:[2,51],4:56,5:[2,51],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,51],16:[1,13],17:[2,51],18:[1,14],19:[1,15],20:[2,51],21:[1,16],22:[2,51],23:[1,17],24:[2,51],25:[1,18],26:[2,51],27:[1,19],28:[1,20],29:[2,51],30:[1,21],31:[2,51],32:[1,22],33:[2,51],34:[1,23],35:[1,57],36:[1,24],37:[2,51],38:[1,25],39:[2,51],40:[1,26],41:[2,51],42:[1,27],43:[1,28],45:[1,29],47:[2,51],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,51]},{1:[2,55],4:58,5:[2,55],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,55],16:[1,13],17:[2,55],18:[1,14],19:[1,15],20:[2,55],21:[1,16],22:[2,55],23:[1,17],24:[2,55],25:[1,18],26:[2,55],27:[1,19],28:[1,20],29:[2,55],30:[1,21],31:[2,55],32:[1,22],33:[2,55],34:[1,23],35:[2,55],36:[1,24],37:[1,59],38:[1,25],39:[2,55],40:[1,26],41:[2,55],42:[1,27],43:[1,28],45:[1,29],47:[2,55],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,55]},{1:[2,59],4:60,5:[2,59],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,59],16:[1,13],17:[2,59],18:[1,14],19:[1,15],20:[2,59],21:[1,16],22:[2,59],23:[1,17],24:[2,59],25:[1,18],26:[2,59],27:[1,19],28:[1,20],29:[2,59],30:[1,21],31:[2,59],32:[1,22],33:[2,59],34:[1,23],35:[2,59],36:[1,24],37:[2,59],38:[1,25],39:[1,61],40:[1,26],41:[2,59],42:[1,27],43:[1,28],45:[1,29],47:[2,59],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,59]},{1:[2,63],4:62,5:[2,63],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,63],16:[1,13],17:[2,63],18:[1,14],19:[1,15],20:[2,63],21:[1,16],22:[2,63],23:[1,17],24:[2,63],25:[1,18],26:[2,63],27:[1,19],28:[1,20],29:[2,63],30:[1,21],31:[2,63],32:[1,22],33:[2,63],34:[1,23],35:[2,63],36:[1,24],37:[2,63],38:[1,25],39:[2,63],40:[1,26],41:[1,63],42:[1,27],43:[1,28],45:[1,29],47:[2,63],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,63]},{1:[2,67],5:[2,67],7:[2,67],8:[2,67],9:[2,67],10:[2,67],11:[2,67],12:[2,67],13:[2,67],14:[2,67],15:[2,67],16:[2,67],17:[2,67],18:[2,67],19:[2,67],20:[2,67],21:[2,67],22:[2,67],23:[2,67],24:[2,67],25:[2,67],26:[2,67],27:[2,67],28:[2,67],29:[2,67],30:[2,67],31:[2,67],32:[2,67],33:[2,67],34:[2,67],35:[2,67],36:[2,67],37:[2,67],38:[2,67],39:[2,67],40:[2,67],41:[2,67],42:[2,67],43:[2,67],45:[2,67],47:[2,67],48:[2,67],49:[2,67],50:[2,67],51:[2,67],52:[2,67],53:[2,67],55:[2,67]},{1:[2,68],4:64,5:[2,68],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,68],16:[1,13],17:[2,68],18:[1,14],19:[1,15],20:[2,68],21:[1,16],22:[2,68],23:[1,17],24:[2,68],25:[1,18],26:[2,68],27:[1,19],28:[1,20],29:[2,68],30:[1,21],31:[2,68],32:[1,22],33:[2,68],34:[1,23],35:[2,68],36:[1,24],37:[2,68],38:[1,25],39:[2,68],40:[1,26],41:[2,68],42:[1,27],43:[1,28],44:[1,65],45:[1,29],47:[2,68],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,68]},{1:[2,75],5:[2,75],7:[2,75],8:[2,75],9:[2,75],10:[2,75],11:[2,75],12:[2,75],13:[2,75],14:[2,75],15:[2,75],16:[2,75],17:[2,75],18:[2,75],19:[2,75],20:[2,75],21:[2,75],22:[2,75],23:[2,75],24:[2,75],25:[2,75],26:[2,75],27:[2,75],28:[2,75],29:[2,75],30:[2,75],31:[2,75],32:[2,75],33:[2,75],34:[2,75],35:[2,75],36:[2,75],37:[2,75],38:[2,75],39:[2,75],40:[2,75],41:[2,75],42:[2,75],43:[2,75],45:[2,75],46:[1,66],47:[2,75],48:[2,75],49:[2,75],50:[2,75],51:[2,75],52:[2,75],53:[2,75],55:[2,75]},{1:[2,76],5:[2,76],7:[2,76],8:[2,76],9:[2,76],10:[2,76],11:[2,76],12:[2,76],13:[2,76],14:[2,76],15:[2,76],16:[2,76],17:[2,76],18:[2,76],19:[2,76],20:[2,76],21:[2,76],22:[2,76],23:[2,76],24:[2,76],25:[2,76],26:[2,76],27:[2,76],28:[2,76],29:[2,76],30:[2,76],31:[2,76],32:[2,76],33:[2,76],34:[2,76],35:[2,76],36:[2,76],37:[2,76],38:[2,76],39:[2,76],40:[2,76],41:[2,76],42:[2,76],43:[2,76],45:[2,76],47:[2,76],48:[2,76],49:[2,76],50:[2,76],51:[2,76],52:[2,76],53:[2,76],55:[2,76]},{1:[2,77],5:[2,77],7:[2,77],8:[2,77],9:[2,77],10:[2,77],11:[2,77],12:[2,77],13:[2,77],14:[2,77],15:[2,77],16:[2,77],17:[2,77],18:[2,77],19:[2,77],20:[2,77],21:[2,77],22:[2,77],23:[2,77],24:[2,77],25:[2,77],26:[2,77],27:[2,77],28:[2,77],29:[2,77],30:[2,77],31:[2,77],32:[2,77],33:[2,77],34:[2,77],35:[2,77],36:[2,77],37:[2,77],38:[2,77],39:[2,77],40:[2,77],41:[2,77],42:[2,77],43:[2,77],45:[2,77],47:[2,77],48:[2,77],49:[2,77],50:[2,77],51:[2,77],52:[2,77],53:[2,77],55:[2,77]},{1:[2,78],5:[2,78],7:[2,78],8:[2,78],9:[2,78],10:[2,78],11:[2,78],12:[2,78],13:[2,78],14:[2,78],15:[2,78],16:[2,78],17:[2,78],18:[2,78],19:[2,78],20:[2,78],21:[2,78],22:[2,78],23:[2,78],24:[2,78],25:[2,78],26:[2,78],27:[2,78],28:[2,78],29:[2,78],30:[2,78],31:[2,78],32:[2,78],33:[2,78],34:[2,78],35:[2,78],36:[2,78],37:[2,78],38:[2,78],39:[2,78],40:[2,78],41:[2,78],42:[2,78],43:[2,78],45:[2,78],47:[2,78],48:[2,78],49:[2,78],50:[2,78],51:[2,78],52:[2,78],53:[2,78],55:[2,78]},{1:[2,79],5:[2,79],7:[2,79],8:[2,79],9:[2,79],10:[2,79],11:[2,79],12:[2,79],13:[2,79],14:[2,79],15:[2,79],16:[2,79],17:[2,79],18:[2,79],19:[2,79],20:[2,79],21:[2,79],22:[2,79],23:[2,79],24:[2,79],25:[2,79],26:[2,79],27:[2,79],28:[2,79],29:[2,79],30:[2,79],31:[2,79],32:[2,79],33:[2,79],34:[2,79],35:[2,79],36:[2,79],37:[2,79],38:[2,79],39:[2,79],40:[2,79],41:[2,79],42:[2,79],43:[2,79],45:[2,79],47:[2,79],48:[2,79],49:[2,79],50:[2,79],51:[2,79],52:[2,79],53:[2,79],55:[2,79]},{1:[2,80],5:[2,80],7:[2,80],8:[2,80],9:[2,80],10:[2,80],11:[2,80],12:[2,80],13:[2,80],14:[2,80],15:[2,80],16:[2,80],17:[2,80],18:[2,80],19:[2,80],20:[2,80],21:[2,80],22:[2,80],23:[2,80],24:[2,80],25:[2,80],26:[2,80],27:[2,80],28:[2,80],29:[2,80],30:[2,80],31:[2,80],32:[2,80],33:[2,80],34:[2,80],35:[2,80],36:[2,80],37:[2,80],38:[2,80],39:[2,80],40:[2,80],41:[2,80],42:[2,80],43:[2,80],45:[2,80],47:[2,80],48:[2,80],49:[2,80],50:[2,80],51:[2,80],52:[2,80],53:[2,80],55:[2,80]},{1:[2,85],5:[2,85],7:[2,85],8:[2,85],9:[2,85],10:[2,85],11:[2,85],12:[2,85],13:[2,85],14:[2,85],15:[2,85],16:[2,85],17:[2,85],18:[2,85],19:[2,85],20:[2,85],21:[2,85],22:[2,85],23:[2,85],24:[2,85],25:[2,85],26:[2,85],27:[2,85],28:[2,85],29:[2,85],30:[2,85],31:[2,85],32:[2,85],33:[2,85],34:[2,85],35:[2,85],36:[2,85],37:[2,85],38:[2,85],39:[2,85],40:[2,85],41:[2,85],42:[2,85],43:[2,85],45:[2,85],47:[2,85],48:[2,85],49:[2,85],50:[2,85],51:[2,85],52:[2,85],53:[2,85],54:[1,67],55:[2,85]},{1:[2,2]},{1:[2,5],5:[2,5],7:[2,5],8:[2,5],9:[2,5],10:[2,5],11:[2,5],12:[2,5],13:[2,5],14:[2,5],15:[2,5],16:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],38:[2,5],39:[2,5],40:[2,5],41:[2,5],42:[2,5],43:[2,5],45:[2,5],47:[2,5],48:[2,5],49:[2,5],50:[2,5],51:[2,5],52:[2,5],53:[2,5],55:[2,5]},{1:[2,14],5:[2,14],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[1,68],16:[1,13],17:[2,14],18:[1,14],19:[1,15],20:[2,14],21:[1,16],22:[2,14],23:[1,17],24:[2,14],25:[1,18],26:[2,14],27:[1,19],28:[1,20],29:[2,14],30:[1,21],31:[2,14],32:[1,22],33:[2,14],34:[1,23],35:[2,14],36:[1,24],37:[2,14],38:[1,25],39:[2,14],40:[1,26],41:[2,14],42:[1,27],43:[1,28],45:[1,29],47:[2,14],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,14]},{1:[2,15],5:[2,15],7:[2,15],8:[2,15],9:[2,15],10:[2,15],11:[2,15],12:[2,15],13:[2,15],14:[2,15],15:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],39:[2,15],40:[2,15],41:[2,15],42:[2,15],43:[2,15],45:[2,15],47:[2,15],48:[2,15],49:[2,15],50:[2,15],51:[2,15],52:[2,15],53:[2,15],55:[2,15]},{1:[2,18],5:[2,18],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,18],16:[1,13],17:[1,69],18:[1,14],19:[1,15],20:[2,18],21:[1,16],22:[2,18],23:[1,17],24:[2,18],25:[1,18],26:[2,18],27:[1,19],28:[1,20],29:[2,18],30:[1,21],31:[2,18],32:[1,22],33:[2,18],34:[1,23],35:[2,18],36:[1,24],37:[2,18],38:[1,25],39:[2,18],40:[1,26],41:[2,18],42:[1,27],43:[1,28],45:[1,29],47:[2,18],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,18]},{1:[2,19],5:[2,19],7:[2,19],8:[2,19],9:[2,19],10:[2,19],11:[2,19],12:[2,19],13:[2,19],14:[2,19],15:[2,19],16:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],39:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],45:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],53:[2,19],55:[2,19]},{1:[2,23],5:[2,23],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,23],16:[1,13],17:[2,23],18:[1,14],19:[1,15],20:[1,70],21:[1,16],22:[2,23],23:[1,17],24:[2,23],25:[1,18],26:[2,23],27:[1,19],28:[1,20],29:[2,23],30:[1,21],31:[2,23],32:[1,22],33:[2,23],34:[1,23],35:[2,23],36:[1,24],37:[2,23],38:[1,25],39:[2,23],40:[1,26],41:[2,23],42:[1,27],43:[1,28],45:[1,29],47:[2,23],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,23]},{1:[2,24],5:[2,24],7:[2,24],8:[2,24],9:[2,24],10:[2,24],11:[2,24],12:[2,24],13:[2,24],14:[2,24],15:[2,24],16:[2,24],17:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],45:[2,24],47:[2,24],48:[2,24],49:[2,24],50:[2,24],51:[2,24],52:[2,24],53:[2,24],55:[2,24]},{1:[2,27],5:[2,27],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,27],16:[1,13],17:[2,27],18:[1,14],19:[1,15],20:[2,27],21:[1,16],22:[1,71],23:[1,17],24:[2,27],25:[1,18],26:[2,27],27:[1,19],28:[1,20],29:[2,27],30:[1,21],31:[2,27],32:[1,22],33:[2,27],34:[1,23],35:[2,27],36:[1,24],37:[2,27],38:[1,25],39:[2,27],40:[1,26],41:[2,27],42:[1,27],43:[1,28],45:[1,29],47:[2,27],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,27]},{1:[2,28],5:[2,28],7:[2,28],8:[2,28],9:[2,28],10:[2,28],11:[2,28],12:[2,28],13:[2,28],14:[2,28],15:[2,28],16:[2,28],17:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[2,28],38:[2,28],39:[2,28],40:[2,28],41:[2,28],42:[2,28],43:[2,28],45:[2,28],47:[2,28],48:[2,28],49:[2,28],50:[2,28],51:[2,28],52:[2,28],53:[2,28],55:[2,28]},{1:[2,31],5:[2,31],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,31],16:[1,13],17:[2,31],18:[1,14],19:[1,15],20:[2,31],21:[1,16],22:[2,31],23:[1,17],24:[1,72],25:[1,18],26:[2,31],27:[1,19],28:[1,20],29:[2,31],30:[1,21],31:[2,31],32:[1,22],33:[2,31],34:[1,23],35:[2,31],36:[1,24],37:[2,31],38:[1,25],39:[2,31],40:[1,26],41:[2,31],42:[1,27],43:[1,28],45:[1,29],47:[2,31],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,31]},{1:[2,32],5:[2,32],7:[2,32],8:[2,32],9:[2,32],10:[2,32],11:[2,32],12:[2,32],13:[2,32],14:[2,32],15:[2,32],16:[2,32],17:[2,32],18:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[2,32],40:[2,32],41:[2,32],42:[2,32],43:[2,32],45:[2,32],47:[2,32],48:[2,32],49:[2,32],50:[2,32],51:[2,32],52:[2,32],53:[2,32],55:[2,32]},{1:[2,35],5:[2,35],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,35],16:[1,13],17:[2,35],18:[1,14],19:[1,15],20:[2,35],21:[1,16],22:[2,35],23:[1,17],24:[2,35],25:[1,18],26:[1,73],27:[1,19],28:[1,20],29:[2,35],30:[1,21],31:[2,35],32:[1,22],33:[2,35],34:[1,23],35:[2,35],36:[1,24],37:[2,35],38:[1,25],39:[2,35],40:[1,26],41:[2,35],42:[1,27],43:[1,28],45:[1,29],47:[2,35],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,35]},{1:[2,36],5:[2,36],7:[2,36],8:[2,36],9:[2,36],10:[2,36],11:[2,36],12:[2,36],13:[2,36],14:[2,36],15:[2,36],16:[2,36],17:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[2,36],28:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[2,36],45:[2,36],47:[2,36],48:[2,36],49:[2,36],50:[2,36],51:[2,36],52:[2,36],53:[2,36],55:[2,36]},{1:[2,40],5:[2,40],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,40],16:[1,13],17:[2,40],18:[1,14],19:[1,15],20:[2,40],21:[1,16],22:[2,40],23:[1,17],24:[2,40],25:[1,18],26:[2,40],27:[1,19],28:[1,20],29:[1,74],30:[1,21],31:[2,40],32:[1,22],33:[2,40],34:[1,23],35:[2,40],36:[1,24],37:[2,40],38:[1,25],39:[2,40],40:[1,26],41:[2,40],42:[1,27],43:[1,28],45:[1,29],47:[2,40],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,40]},{1:[2,41],5:[2,41],7:[2,41],8:[2,41],9:[2,41],10:[2,41],11:[2,41],12:[2,41],13:[2,41],14:[2,41],15:[2,41],16:[2,41],17:[2,41],18:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],34:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],45:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],53:[2,41],55:[2,41]},{1:[2,44],5:[2,44],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,44],16:[1,13],17:[2,44],18:[1,14],19:[1,15],20:[2,44],21:[1,16],22:[2,44],23:[1,17],24:[2,44],25:[1,18],26:[2,44],27:[1,19],28:[1,20],29:[2,44],30:[1,21],31:[1,75],32:[1,22],33:[2,44],34:[1,23],35:[2,44],36:[1,24],37:[2,44],38:[1,25],39:[2,44],40:[1,26],41:[2,44],42:[1,27],43:[1,28],45:[1,29],47:[2,44],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,44]},{1:[2,45],5:[2,45],7:[2,45],8:[2,45],9:[2,45],10:[2,45],11:[2,45],12:[2,45],13:[2,45],14:[2,45],15:[2,45],16:[2,45],17:[2,45],18:[2,45],19:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],31:[2,45],32:[2,45],33:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],42:[2,45],43:[2,45],45:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],51:[2,45],52:[2,45],53:[2,45],55:[2,45]},{1:[2,48],5:[2,48],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,48],16:[1,13],17:[2,48],18:[1,14],19:[1,15],20:[2,48],21:[1,16],22:[2,48],23:[1,17],24:[2,48],25:[1,18],26:[2,48],27:[1,19],28:[1,20],29:[2,48],30:[1,21],31:[2,48],32:[1,22],33:[1,76],34:[1,23],35:[2,48],36:[1,24],37:[2,48],38:[1,25],39:[2,48],40:[1,26],41:[2,48],42:[1,27],43:[1,28],45:[1,29],47:[2,48],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,48]},{1:[2,49],5:[2,49],7:[2,49],8:[2,49],9:[2,49],10:[2,49],11:[2,49],12:[2,49],13:[2,49],14:[2,49],15:[2,49],16:[2,49],17:[2,49],18:[2,49],19:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],31:[2,49],32:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],45:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],51:[2,49],52:[2,49],53:[2,49],55:[2,49]},{1:[2,52],5:[2,52],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,52],16:[1,13],17:[2,52],18:[1,14],19:[1,15],20:[2,52],21:[1,16],22:[2,52],23:[1,17],24:[2,52],25:[1,18],26:[2,52],27:[1,19],28:[1,20],29:[2,52],30:[1,21],31:[2,52],32:[1,22],33:[2,52],34:[1,23],35:[1,77],36:[1,24],37:[2,52],38:[1,25],39:[2,52],40:[1,26],41:[2,52],42:[1,27],43:[1,28],45:[1,29],47:[2,52],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,52]},{1:[2,53],5:[2,53],7:[2,53],8:[2,53],9:[2,53],10:[2,53],11:[2,53],12:[2,53],13:[2,53],14:[2,53],15:[2,53],16:[2,53],17:[2,53],18:[2,53],19:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],30:[2,53],31:[2,53],32:[2,53],33:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],42:[2,53],43:[2,53],45:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[2,53],52:[2,53],53:[2,53],55:[2,53]},{1:[2,56],5:[2,56],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,56],16:[1,13],17:[2,56],18:[1,14],19:[1,15],20:[2,56],21:[1,16],22:[2,56],23:[1,17],24:[2,56],25:[1,18],26:[2,56],27:[1,19],28:[1,20],29:[2,56],30:[1,21],31:[2,56],32:[1,22],33:[2,56],34:[1,23],35:[2,56],36:[1,24],37:[1,78],38:[1,25],39:[2,56],40:[1,26],41:[2,56],42:[1,27],43:[1,28],45:[1,29],47:[2,56],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,56]},{1:[2,57],5:[2,57],7:[2,57],8:[2,57],9:[2,57],10:[2,57],11:[2,57],12:[2,57],13:[2,57],14:[2,57],15:[2,57],16:[2,57],17:[2,57],18:[2,57],19:[2,57],20:[2,57],21:[2,57],22:[2,57],23:[2,57],24:[2,57],25:[2,57],26:[2,57],27:[2,57],28:[2,57],29:[2,57],30:[2,57],31:[2,57],32:[2,57],33:[2,57],34:[2,57],35:[2,57],36:[2,57],37:[2,57],38:[2,57],39:[2,57],40:[2,57],41:[2,57],42:[2,57],43:[2,57],45:[2,57],47:[2,57],48:[2,57],49:[2,57],50:[2,57],51:[2,57],52:[2,57],53:[2,57],55:[2,57]},{1:[2,60],5:[2,60],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,60],16:[1,13],17:[2,60],18:[1,14],19:[1,15],20:[2,60],21:[1,16],22:[2,60],23:[1,17],24:[2,60],25:[1,18],26:[2,60],27:[1,19],28:[1,20],29:[2,60],30:[1,21],31:[2,60],32:[1,22],33:[2,60],34:[1,23],35:[2,60],36:[1,24],37:[2,60],38:[1,25],39:[1,79],40:[1,26],41:[2,60],42:[1,27],43:[1,28],45:[1,29],47:[2,60],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,60]},{1:[2,61],5:[2,61],7:[2,61],8:[2,61],9:[2,61],10:[2,61],11:[2,61],12:[2,61],13:[2,61],14:[2,61],15:[2,61],16:[2,61],17:[2,61],18:[2,61],19:[2,61],20:[2,61],21:[2,61],22:[2,61],23:[2,61],24:[2,61],25:[2,61],26:[2,61],27:[2,61],28:[2,61],29:[2,61],30:[2,61],31:[2,61],32:[2,61],33:[2,61],34:[2,61],35:[2,61],36:[2,61],37:[2,61],38:[2,61],39:[2,61],40:[2,61],41:[2,61],42:[2,61],43:[2,61],45:[2,61],47:[2,61],48:[2,61],49:[2,61],50:[2,61],51:[2,61],52:[2,61],53:[2,61],55:[2,61]},{1:[2,64],5:[2,64],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,64],16:[1,13],17:[2,64],18:[1,14],19:[1,15],20:[2,64],21:[1,16],22:[2,64],23:[1,17],24:[2,64],25:[1,18],26:[2,64],27:[1,19],28:[1,20],29:[2,64],30:[1,21],31:[2,64],32:[1,22],33:[2,64],34:[1,23],35:[2,64],36:[1,24],37:[2,64],38:[1,25],39:[2,64],40:[1,26],41:[1,80],42:[1,27],43:[1,28],45:[1,29],47:[2,64],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,64]},{1:[2,65],5:[2,65],7:[2,65],8:[2,65],9:[2,65],10:[2,65],11:[2,65],12:[2,65],13:[2,65],14:[2,65],15:[2,65],16:[2,65],17:[2,65],18:[2,65],19:[2,65],20:[2,65],21:[2,65],22:[2,65],23:[2,65],24:[2,65],25:[2,65],26:[2,65],27:[2,65],28:[2,65],29:[2,65],30:[2,65],31:[2,65],32:[2,65],33:[2,65],34:[2,65],35:[2,65],36:[2,65],37:[2,65],38:[2,65],39:[2,65],40:[2,65],41:[2,65],42:[2,65],43:[2,65],45:[2,65],47:[2,65],48:[2,65],49:[2,65],50:[2,65],51:[2,65],52:[2,65],53:[2,65],55:[2,65]},{1:[2,69],5:[2,69],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,69],16:[1,13],17:[2,69],18:[1,14],19:[1,15],20:[2,69],21:[1,16],22:[2,69],23:[1,17],24:[2,69],25:[1,18],26:[2,69],27:[1,19],28:[1,20],29:[2,69],30:[1,21],31:[2,69],32:[1,22],33:[2,69],34:[1,23],35:[2,69],36:[1,24],37:[2,69],38:[1,25],39:[2,69],40:[1,26],41:[2,69],42:[1,27],43:[1,28],45:[1,29],47:[2,69],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,69]},{1:[2,70],5:[2,70],7:[2,70],8:[2,70],9:[2,70],10:[2,70],11:[2,70],12:[2,70],13:[2,70],14:[2,70],15:[2,70],16:[2,70],17:[2,70],18:[2,70],19:[2,70],20:[2,70],21:[2,70],22:[2,70],23:[2,70],24:[2,70],25:[2,70],26:[2,70],27:[2,70],28:[2,70],29:[2,70],30:[2,70],31:[2,70],32:[2,70],33:[2,70],34:[2,70],35:[2,70],36:[2,70],37:[2,70],38:[2,70],39:[2,70],40:[2,70],41:[2,70],42:[2,70],43:[2,70],45:[2,70],47:[2,70],48:[2,70],49:[2,70],50:[2,70],51:[2,70],52:[2,70],53:[2,70],55:[2,70]},{1:[2,74],4:81,5:[2,74],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,74],16:[1,13],17:[2,74],18:[1,14],19:[1,15],20:[2,74],21:[1,16],22:[2,74],23:[1,17],24:[2,74],25:[1,18],26:[2,74],27:[1,19],28:[1,20],29:[2,74],30:[1,21],31:[2,74],32:[1,22],33:[2,74],34:[1,23],35:[2,74],36:[1,24],37:[2,74],38:[1,25],39:[2,74],40:[1,26],41:[2,74],42:[1,27],43:[1,28],45:[1,29],47:[1,82],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,74]},{1:[2,84],4:84,5:[2,84],6:4,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,84],16:[1,13],17:[2,84],18:[1,14],19:[1,15],20:[2,84],21:[1,16],22:[2,84],23:[1,17],24:[2,84],25:[1,18],26:[2,84],27:[1,19],28:[1,20],29:[2,84],30:[1,21],31:[2,84],32:[1,22],33:[2,84],34:[1,23],35:[2,84],36:[1,24],37:[2,84],38:[1,25],39:[2,84],40:[1,26],41:[2,84],42:[1,27],43:[1,28],45:[1,29],47:[2,84],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[1,83]},{1:[2,16],5:[2,16],7:[2,16],8:[2,16],9:[2,16],10:[2,16],11:[2,16],12:[2,16],13:[2,16],14:[2,16],15:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],39:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],45:[2,16],47:[2,16],48:[2,16],49:[2,16],50:[2,16],51:[2,16],52:[2,16],53:[2,16],55:[2,16]},{1:[2,20],5:[2,20],7:[2,20],8:[2,20],9:[2,20],10:[2,20],11:[2,20],12:[2,20],13:[2,20],14:[2,20],15:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],39:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],45:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],52:[2,20],53:[2,20],55:[2,20]},{1:[2,25],5:[2,25],7:[2,25],8:[2,25],9:[2,25],10:[2,25],11:[2,25],12:[2,25],13:[2,25],14:[2,25],15:[2,25],16:[2,25],17:[2,25],18:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],45:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],53:[2,25],55:[2,25]},{1:[2,29],5:[2,29],7:[2,29],8:[2,29],9:[2,29],10:[2,29],11:[2,29],12:[2,29],13:[2,29],14:[2,29],15:[2,29],16:[2,29],17:[2,29],18:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[2,29],42:[2,29],43:[2,29],45:[2,29],47:[2,29],48:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],53:[2,29],55:[2,29]},{1:[2,33],5:[2,33],7:[2,33],8:[2,33],9:[2,33],10:[2,33],11:[2,33],12:[2,33],13:[2,33],14:[2,33],15:[2,33],16:[2,33],17:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[2,33],40:[2,33],41:[2,33],42:[2,33],43:[2,33],45:[2,33],47:[2,33],48:[2,33],49:[2,33],50:[2,33],51:[2,33],52:[2,33],53:[2,33],55:[2,33]},{1:[2,37],5:[2,37],7:[2,37],8:[2,37],9:[2,37],10:[2,37],11:[2,37],12:[2,37],13:[2,37],14:[2,37],15:[2,37],16:[2,37],17:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[2,37],28:[2,37],29:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],45:[2,37],47:[2,37],48:[2,37],49:[2,37],50:[2,37],51:[2,37],52:[2,37],53:[2,37],55:[2,37]},{1:[2,42],5:[2,42],7:[2,42],8:[2,42],9:[2,42],10:[2,42],11:[2,42],12:[2,42],13:[2,42],14:[2,42],15:[2,42],16:[2,42],17:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],45:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42],52:[2,42],53:[2,42],55:[2,42]},{1:[2,46],5:[2,46],7:[2,46],8:[2,46],9:[2,46],10:[2,46],11:[2,46],12:[2,46],13:[2,46],14:[2,46],15:[2,46],16:[2,46],17:[2,46],18:[2,46],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],45:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],51:[2,46],52:[2,46],53:[2,46],55:[2,46]},{1:[2,50],5:[2,50],7:[2,50],8:[2,50],9:[2,50],10:[2,50],11:[2,50],12:[2,50],13:[2,50],14:[2,50],15:[2,50],16:[2,50],17:[2,50],18:[2,50],19:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],31:[2,50],32:[2,50],33:[2,50],34:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],45:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],51:[2,50],52:[2,50],53:[2,50],55:[2,50]},{1:[2,54],5:[2,54],7:[2,54],8:[2,54],9:[2,54],10:[2,54],11:[2,54],12:[2,54],13:[2,54],14:[2,54],15:[2,54],16:[2,54],17:[2,54],18:[2,54],19:[2,54],20:[2,54],21:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],30:[2,54],31:[2,54],32:[2,54],33:[2,54],34:[2,54],35:[2,54],36:[2,54],37:[2,54],38:[2,54],39:[2,54],40:[2,54],41:[2,54],42:[2,54],43:[2,54],45:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],51:[2,54],52:[2,54],53:[2,54],55:[2,54]},{1:[2,58],5:[2,58],7:[2,58],8:[2,58],9:[2,58],10:[2,58],11:[2,58],12:[2,58],13:[2,58],14:[2,58],15:[2,58],16:[2,58],17:[2,58],18:[2,58],19:[2,58],20:[2,58],21:[2,58],22:[2,58],23:[2,58],24:[2,58],25:[2,58],26:[2,58],27:[2,58],28:[2,58],29:[2,58],30:[2,58],31:[2,58],32:[2,58],33:[2,58],34:[2,58],35:[2,58],36:[2,58],37:[2,58],38:[2,58],39:[2,58],40:[2,58],41:[2,58],42:[2,58],43:[2,58],45:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],51:[2,58],52:[2,58],53:[2,58],55:[2,58]},{1:[2,62],5:[2,62],7:[2,62],8:[2,62],9:[2,62],10:[2,62],11:[2,62],12:[2,62],13:[2,62],14:[2,62],15:[2,62],16:[2,62],17:[2,62],18:[2,62],19:[2,62],20:[2,62],21:[2,62],22:[2,62],23:[2,62],24:[2,62],25:[2,62],26:[2,62],27:[2,62],28:[2,62],29:[2,62],30:[2,62],31:[2,62],32:[2,62],33:[2,62],34:[2,62],35:[2,62],36:[2,62],37:[2,62],38:[2,62],39:[2,62],40:[2,62],41:[2,62],42:[2,62],43:[2,62],45:[2,62],47:[2,62],48:[2,62],49:[2,62],50:[2,62],51:[2,62],52:[2,62],53:[2,62],55:[2,62]},{1:[2,66],5:[2,66],7:[2,66],8:[2,66],9:[2,66],10:[2,66],11:[2,66],12:[2,66],13:[2,66],14:[2,66],15:[2,66],16:[2,66],17:[2,66],18:[2,66],19:[2,66],20:[2,66],21:[2,66],22:[2,66],23:[2,66],24:[2,66],25:[2,66],26:[2,66],27:[2,66],28:[2,66],29:[2,66],30:[2,66],31:[2,66],32:[2,66],33:[2,66],34:[2,66],35:[2,66],36:[2,66],37:[2,66],38:[2,66],39:[2,66],40:[2,66],41:[2,66],42:[2,66],43:[2,66],45:[2,66],47:[2,66],48:[2,66],49:[2,66],50:[2,66],51:[2,66],52:[2,66],53:[2,66],55:[2,66]},{1:[2,71],5:[2,71],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,71],16:[1,13],17:[2,71],18:[1,14],19:[1,15],20:[2,71],21:[1,16],22:[2,71],23:[1,17],24:[2,71],25:[1,18],26:[2,71],27:[1,19],28:[1,20],29:[2,71],30:[1,21],31:[2,71],32:[1,22],33:[2,71],34:[1,23],35:[2,71],36:[1,24],37:[2,71],38:[1,25],39:[2,71],40:[1,26],41:[2,71],42:[1,27],43:[1,28],45:[1,29],47:[1,85],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[2,71]},{1:[2,73],5:[2,73],7:[2,73],8:[2,73],9:[2,73],10:[2,73],11:[2,73],12:[2,73],13:[2,73],14:[2,73],15:[2,73],16:[2,73],17:[2,73],18:[2,73],19:[2,73],20:[2,73],21:[2,73],22:[2,73],23:[2,73],24:[2,73],25:[2,73],26:[2,73],27:[2,73],28:[2,73],29:[2,73],30:[2,73],31:[2,73],32:[2,73],33:[2,73],34:[2,73],35:[2,73],36:[2,73],37:[2,73],38:[2,73],39:[2,73],40:[2,73],41:[2,73],42:[2,73],43:[2,73],45:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],51:[2,73],52:[2,73],53:[2,73],55:[2,73]},{1:[2,81],5:[2,81],7:[2,81],8:[2,81],9:[2,81],10:[2,81],11:[2,81],12:[2,81],13:[2,81],14:[2,81],15:[2,81],16:[2,81],17:[2,81],18:[2,81],19:[2,81],20:[2,81],21:[2,81],22:[2,81],23:[2,81],24:[2,81],25:[2,81],26:[2,81],27:[2,81],28:[2,81],29:[2,81],30:[2,81],31:[2,81],32:[2,81],33:[2,81],34:[2,81],35:[2,81],36:[2,81],37:[2,81],38:[2,81],39:[2,81],40:[2,81],41:[2,81],42:[2,81],43:[2,81],45:[2,81],47:[2,81],48:[2,81],49:[2,81],50:[2,81],51:[2,81],52:[2,81],53:[2,81],55:[2,81]},{1:[2,83],5:[2,83],6:37,7:[1,5],8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:[1,10],13:[1,11],14:[1,12],15:[2,83],16:[1,13],17:[2,83],18:[1,14],19:[1,15],20:[2,83],21:[1,16],22:[2,83],23:[1,17],24:[2,83],25:[1,18],26:[2,83],27:[1,19],28:[1,20],29:[2,83],30:[1,21],31:[2,83],32:[1,22],33:[2,83],34:[1,23],35:[2,83],36:[1,24],37:[2,83],38:[1,25],39:[2,83],40:[1,26],41:[2,83],42:[1,27],43:[1,28],45:[1,29],47:[2,83],48:[1,30],49:[1,31],50:[1,32],51:[1,33],52:[1,34],53:[1,35],55:[1,86]},{1:[2,72],5:[2,72],7:[2,72],8:[2,72],9:[2,72],10:[2,72],11:[2,72],12:[2,72],13:[2,72],14:[2,72],15:[2,72],16:[2,72],17:[2,72],18:[2,72],19:[2,72],20:[2,72],21:[2,72],22:[2,72],23:[2,72],24:[2,72],25:[2,72],26:[2,72],27:[2,72],28:[2,72],29:[2,72],30:[2,72],31:[2,72],32:[2,72],33:[2,72],34:[2,72],35:[2,72],36:[2,72],37:[2,72],38:[2,72],39:[2,72],40:[2,72],41:[2,72],42:[2,72],43:[2,72],45:[2,72],47:[2,72],48:[2,72],49:[2,72],50:[2,72],51:[2,72],52:[2,72],53:[2,72],55:[2,72]},{1:[2,82],5:[2,82],7:[2,82],8:[2,82],9:[2,82],10:[2,82],11:[2,82],12:[2,82],13:[2,82],14:[2,82],15:[2,82],16:[2,82],17:[2,82],18:[2,82],19:[2,82],20:[2,82],21:[2,82],22:[2,82],23:[2,82],24:[2,82],25:[2,82],26:[2,82],27:[2,82],28:[2,82],29:[2,82],30:[2,82],31:[2,82],32:[2,82],33:[2,82],34:[2,82],35:[2,82],36:[2,82],37:[2,82],38:[2,82],39:[2,82],40:[2,82],41:[2,82],42:[2,82],43:[2,82],45:[2,82],47:[2,82],48:[2,82],49:[2,82],50:[2,82],51:[2,82],52:[2,82],53:[2,82],55:[2,82]}],
defaultActions: {3:[2,3],36:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


(function() {
    this.WikiLingo = (this.WikiLingo || {});
    var me = this.WikiLingo.Definition = Parser;
}).call((typeof window !== 'undefined' ? window : {}));/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skip REAL_EOF*/
break;
case 1:
    return 12;

break;
case 2:
    //js
        yy_.yytext = yy_.yytext.substring(2, yy_.yytext.length - 2);

	/*php
		$yy_.yytext = substr($yy_.yytext, 2, -2);
	*/

    return 9;

break;
case 3:
    //js
        yy_.yytext = yy_.yytext.substring(4, yy_.yytext.length - 5);

	/*php
		$yy_.yytext = substr($yy_.yytext, 4, -5);
	*/

    return 9;

break;
case 4:
    //js
        yy_.yytext = yy_.yytext.substring(2, yy_.yytext.length - 2);

	/*php
        $yy_.yytext = substr($yy_.yytext, 2, -2);
    */
    return 10;

break;
case 5:
    //js
        yy_.yytext = yy_.yytext.substring(4, yy_.yytext.length - 5);

	/*php
        $yy_.yytext = substr($yy_.yytext, 4, -5);
    */
    return 10;

break;
case 6:
    //js
        yy_.yytext = yy_.yytext.substring(2, yy_.yytext.length - 2);

	/*php
		$yy_.yytext = substr($yy_.yytext, 2, -2);
	*/
    return 8;

break;
case 7:
    //js
        yy_.yytext = yy_.yytext.substring(4, yy_.yytext.length - 5);

	/*php
		$yy_.yytext = substr($yy_.yytext, 4, -5);
	*/
    return 8;

break;
case 8:
    //js
        yy_.yytext = yy_.yytext.substring(2, yy_.yytext.length - 2);

	/*php
		$yy_.yytext = substr($yy_.yytext, 2, -2);
	*/
    return 18;

break;
case 9:
    //js
        if (yy.isContent()) return 7;

    /*php
        if ($this->isContent()) return 7;
    */

    return 11;

break;
case 10:
    //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 11:
    //js
        this.yy.lexer.popState();
        this.yy.lexer.begin('block');

	/*php
		$this->popState();
		$this->begin('block');
	*/

	return 54;

break;
case 12:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.popState();

    /*php
        //returns block end
        if ($this->isContent()) return 7;
        $this->popState();
    */

    return 55;

break;
case 13:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

    return 5;

break;
case 14:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('preBlock');

    /*php
        if ($this->isContent()) return 7;
        $this->begin('preBlock');
    */

    return 53;

break;
case 15:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

break;
case 16:
    //js
        this.yy.lexer.popState();
        this.yy.lexer.begin('preBlock');

    /*php
        $this->popState();
        $this->begin('preBlock');
    */

    return 53;

break;
case 17:
    //js
        if (yy.isContent() || yy.tableStack.length) return 7;

    /*php
        if ($this->isContent() || !empty($this->tableStack)) return 7;
    */

    return 48;

break;
case 18:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

    return 44;

break;
case 19:
    //js
        this.yy.lexer.begin('inlinePlugin');

    /*php
        $this->begin('inlinePlugin');
    */

    return 43;

break;
case 20:
    //js
        this.yy.lexer.popState();
        this.yy.lexer.begin('plugin');

    /*php
        $this->popState();
        $this->begin('plugin');
    */

    return 46;

break;
case 21:
    //js
        this.yy.lexer.begin('pluginStart');
        yy.stackPlugin(yy_.yytext);

    /*php
        $this->begin('pluginStart');
        $this->stackPlugin($yy_.yytext);
    */

    return 45;

break;
case 22:
    //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 23:
    //js
        if (yy.pluginMatch(yy_.yytext)) {
            this.yy.lexer.popState();
            yy.pluginStackPop();
            return 47;
        }

    /*php
        $name = end($this->pluginStack);
        if (substr($yy_.yytext, 1, -1) == $name && $this->pluginStackCount > 0) {
            $this->popState();
            $this->pluginStackCount--;
            array_pop($this->pluginStack);
            return 47;
        }
    */

    return 7;

break;
case 24:
    //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 25:
    //js
        this.yy.lexer.popState();

	/*php
		$this->popState();
	*/

	return 35;

break;
case 26:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('pastLink');

	/*php
		if ($this->isContent()) return 7;
		$this->begin('pastLink');
	*/

	return 34;

break;
case 27:
    //js
        if (yy.isContent()) return 7;

    /*php
        if ($this->isContent()) return 7;
    */

    return 13;

break;
case 28:
    //js
        if (yy.isContent()) return 7;

    /*php
        if ($this->isContent()) return 7;
    */

    return 49;

break;
case 29:
     return 27;
 
break;
case 30:
    //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 31:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

    return 15;

break;
case 32:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('bold');

    /*php
        if ($this->isContent()) return 7;
        $this->begin('bold');
    */

    return 14;

break;
case 33:
    //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 34:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

    return 17;

break;
case 35:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('center');

    /*php
        if ($this->isContent()) return 7;
        $this->begin('center');
    */

    return 16;

break;
case 36:
    //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 37:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

    return 20;

break;
case 38:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('color');

    /*php
        if ($this->isContent()) return 7;
        $this->begin('color');
    */

    return 19;

break;
case 39:
    //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 40:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

    return 22;

break;
case 41:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('italic');

    /*php
        if ($this->isContent()) return 7;
        $this->begin('italic');
    */

    return 21;

break;
case 42:
    //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 43:
    //js
        this.linkStack = false;
        this.yy.lexer.popState();

    /*php
        $this->linkStack = false;
        $this->popState();
    */

    return 24;

break;
case 44:
    //js
        if (yy.isContent()) return 7;
        this.yy.linkStack = true;
        this.yy.lexer.begin('link');

    /*php
        if ($this->isContent()) return 7;
        $this->linkStack = true;
        $this->begin('link');
    */

    return 23;

break;
case 45:
   //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 46:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

    return 26;

break;
case 47:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('strike');

    /*php
        if ($this->isContent()) return 7;
        $this->begin('strike');
    */

    return 25;

break;
case 48:
   //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 49:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.popState();
        this.yy.tableStack.pop();

   /*php
        if ($this->isContent()) return 7;
        $this->popState();
        array_pop($this->tableStack);
    */

    return 29;

break;
case 50:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('table');
        this.yy.tableStack.push(true);

    /*php
        if ($this->isContent()) return 7;
        $this->begin('table');
        $this->tableStack[] = true;
    */

    return 28;

break;
case 51:
   //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 52:
    //js
        this.yy.lexer.popState();

    /*php
        $this->popState();
    */

    return 31;

break;
case 53:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('titleBar');

    /*php
        if ($this->isContent()) return 7;
        $this->begin('titleBar');
    */

    return 30;

break;
case 54:
   //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 55:
    /*php
        if ($this->isContent()) return 7;
        $this->popState();
    */

    return 33;

break;
case 56:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('underscore');

    /*php
        if ($this->isContent()) return 7;
        $this->begin('underscore');
    */

    return 32;

break;
case 57:
   //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 58:
    /*php
        if ($this->isContent(array('linkStack'))) return 7;
        $this->linkStack = false;
        $this->popState();
    */

    return 37;

break;
case 59:
    /*php
        if ($this->isContent(array('linkStack'))) return 7;
        $this->linkStack = false;
        $this->popState();
    */

    return 41;

break;
case 60:
    //js
        if (yy.isContent()) return 7;
        this.yy.lexer.begin('wikiLink');

    /*php
        if ($this->isContent()) return 7;
        $this->linkStack = true;
        $this->begin('wikiLink');
    */

    return 36;

break;
case 61:
   //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 62:
    /*php
        if ($this->isContent(array('linkStack'))) return 7;
        $this->linkStack = false;
        $this->popState();
    */

    return 39;

break;
case 63:
    //js
        if (yy.isContent()) return 7;
        this.yy.linkStack = true;
        this.yy.lexer.begin('wikiLinkType');
        yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length - 1);

    /*php
        if ($this->isContent()) return 7;
        $this->linkStack = true;
        $this->begin('wikiLinkType');
        $yy_.yytext = substr($yy_.yytext, 1, -1);
    */

    return 38;

break;
case 64:
   //js
        this.yy.lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 65:
    //js
        if (yy.isContent()) return 7;
        this,yy.linkStack = true;
        this.yy.lexer.begin('wikiUnlink');

    /*php
        if ($this->isContent()) return 7;
        $this->linkStack = true;
        $this->begin('wikiUnlink');
    */

    return 40;

break;
case 66:
    //js
        this.yy.lexer.popState();

	/*php
		$this->popState();
	*/

	return 7;

break;
case 67:
    //js
        return 7;

    /*php
        if ($this->isContent()) return 7;
        $isLink = false;
        $this->events->triggerExpressionWordLinkExists(trim($yy_.yytext), $isLink);

        if ($isLink) {
            if (preg_match('/[ ]$/', $yy_.yytext)) {
                $this->unput(' ');
                $yy_.yytext = trim($yy_.yytext);
            }
            return 42;
        }

        return 7;

    */

break;
case 68:
    return 50;

break;
case 69:
	//special character
	//js
	    if (yy.isContent()) return 7;

	/*php
		if ($this->isContent()) return 7;
	*/

	return 51;

break;
case 70:
    /*php
        //html tag
        return 12;
    */

break;
case 71:/*skip REAL_EOF*/
break;
case 72:return 7;
break;
case 73:return 7;
break;
case 74:
    //js
		if (yy.isContent()) return 7;
		return 52;

	/*php
		if ($this->isContent()) return 7;
		return 52;
	*/

break;
case 75:return 7;
break;
case 76:return 5;
break;
}
},
rules: [/^(?:~~REAL_EOF~~)/,/^(?:[<][!][-][-](.*?)[-][-][>])/,/^(?:-~(.|\n)+?~-)/,/^(?:~np~(.|\n)+?~\/np~)/,/^(?:-\/(.|\n)*?\/-)/,/^(?:~pp~(.|\n)*?~\/pp~)/,/^(?:\/\*(.|\n)*?\*\/)/,/^(?:~tc~(.|\n)*?~\/tc~)/,/^(?:-\+(.|\n)*?\+-)/,/^(?:[%](([0-9A-Za-z_-]+))[%])/,/^(?:$)/,/^(?:([!*#;]+([-+](?=[-+]{2,})|[-+](?![-+]))?))/,/^(?:(?=((\n))))/,/^(?:$)/,/^(?:((\n))(?=([!*#;]+([-+](?=[-+]{2,})|[-+](?![-+]))?)))/,/^(?:(?!([!*#;]+([-+](?=[-+]{2,})|[-+](?![-+]))?)))/,/^(?:(?=([!*#;]+([-+](?=[-+]{2,})|[-+](?![-+]))?)))/,/^(?:((\n)))/,/^(?:((.|\n)*?\}))/,/^(?:\{([a-z0-9_]+)(\s)*)/,/^(?:(.|\n)*?\)\})/,/^(?:\{([A-Z0-9_]+)\((\s)*)/,/^(?:$)/,/^(?:\{([A-Z0-9_]+)\})/,/^(?:$)/,/^(?:[@][)])/,/^(?:@FLP\(.+?\))/,/^(?:---)/,/^(?:%%%)/,/^(?:[ ][-][-][ ])/,/^(?:$)/,/^(?:[_][_])/,/^(?:[_][_])/,/^(?:$)/,/^(?:[:][:])/,/^(?:[:][:])/,/^(?:$)/,/^(?:~~)/,/^(?:~~)/,/^(?:$)/,/^(?:[']['])/,/^(?:[']['])/,/^(?:$)/,/^(?:\])/,/^(?:\[(?![ ]))/,/^(?:$)/,/^(?:--)/,/^(?:--)/,/^(?:$)/,/^(?:[|][|])/,/^(?:[|][|])/,/^(?:$)/,/^(?:[=][-])/,/^(?:[-][=])/,/^(?:$)/,/^(?:[=][=][=])/,/^(?:[=][=][=])/,/^(?:$)/,/^(?:\)\))/,/^(?:\(\()/,/^(?:\(\()/,/^(?:$)/,/^(?:\)\))/,/^(?:\(((([a-z0-9-]+)))\()/,/^(?:$)/,/^(?:\)\))/,/^(?:.)/,/^(?:(([A-Z]+[A-Za-z\x80-\xFF]*))([ ])?)/,/^(?:&(?![ ]))/,/^(?:<(?![a-zA-Z\/])|>)/,/^(?:[<](.|\n)*?[>])/,/^(?:~~REAL_EOF~~)/,/^(?:(([a-z0-9]+[A-Za-z0-9.,?;]*[ ]?|[&][ ])+))/,/^(?:(?!([\@{}\n_\^:\~'-|=\(\)\[\]*#+%<≤ ]))(((.?)))?(?=([\@{}\n_\^:\~'-|=\(\)\[\]*#+%<≤ ])))/,/^(?:(([ ])+))/,/^(?:(.))/,/^(?:$)/],
conditions: {"pastLink":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,24,25,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"wikiLink":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,57,58,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"wikiLinkType":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,61,62,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"wikiUnlink":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,59,60,63,64,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"line":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"preBlock":{"rules":[0,1,2,3,4,5,6,7,8,9,11,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"block":{"rules":[0,1,2,3,4,5,6,7,8,9,10,12,13,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"bold":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,30,31,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"center":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,33,34,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"color":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,36,37,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"italic":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,39,40,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"link":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,42,43,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"skip":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"strike":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,45,46,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"table":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,48,49,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"titleBar":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,51,52,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"underscore":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,54,55,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"pluginStart":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,20,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"plugin":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,22,23,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"inlinePlugin":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,18,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"BOF":{"rules":[0,1,2,3,4,5,6,7,8,9,14,15,16,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,14,17,19,21,26,27,28,29,32,35,38,41,44,47,50,53,56,60,63,65,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Definition;
exports.Parser = Definition.Parser;
exports.parse = function () { return Definition.parse.apply(Definition, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}